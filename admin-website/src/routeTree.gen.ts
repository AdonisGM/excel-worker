/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as QueueManageRouteImport } from './routes/queue/manage'
import { Route as FileTemplatesRouteImport } from './routes/file/templates'
import { Route as FileResultsRouteImport } from './routes/file/results'
import { Route as QueueManageQueueNameRouteImport } from './routes/queue/manage/$queueName'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const QueueManageRoute = QueueManageRouteImport.update({
  id: '/queue/manage',
  path: '/queue/manage',
  getParentRoute: () => rootRouteImport,
} as any)
const FileTemplatesRoute = FileTemplatesRouteImport.update({
  id: '/file/templates',
  path: '/file/templates',
  getParentRoute: () => rootRouteImport,
} as any)
const FileResultsRoute = FileResultsRouteImport.update({
  id: '/file/results',
  path: '/file/results',
  getParentRoute: () => rootRouteImport,
} as any)
const QueueManageQueueNameRoute = QueueManageQueueNameRouteImport.update({
  id: '/$queueName',
  path: '/$queueName',
  getParentRoute: () => QueueManageRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/file/results': typeof FileResultsRoute
  '/file/templates': typeof FileTemplatesRoute
  '/queue/manage': typeof QueueManageRouteWithChildren
  '/queue/manage/$queueName': typeof QueueManageQueueNameRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/file/results': typeof FileResultsRoute
  '/file/templates': typeof FileTemplatesRoute
  '/queue/manage': typeof QueueManageRouteWithChildren
  '/queue/manage/$queueName': typeof QueueManageQueueNameRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/login': typeof LoginRoute
  '/file/results': typeof FileResultsRoute
  '/file/templates': typeof FileTemplatesRoute
  '/queue/manage': typeof QueueManageRouteWithChildren
  '/queue/manage/$queueName': typeof QueueManageQueueNameRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/file/results'
    | '/file/templates'
    | '/queue/manage'
    | '/queue/manage/$queueName'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/file/results'
    | '/file/templates'
    | '/queue/manage'
    | '/queue/manage/$queueName'
  id:
    | '__root__'
    | '/login'
    | '/file/results'
    | '/file/templates'
    | '/queue/manage'
    | '/queue/manage/$queueName'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LoginRoute: typeof LoginRoute
  FileResultsRoute: typeof FileResultsRoute
  FileTemplatesRoute: typeof FileTemplatesRoute
  QueueManageRoute: typeof QueueManageRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/queue/manage': {
      id: '/queue/manage'
      path: '/queue/manage'
      fullPath: '/queue/manage'
      preLoaderRoute: typeof QueueManageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/file/templates': {
      id: '/file/templates'
      path: '/file/templates'
      fullPath: '/file/templates'
      preLoaderRoute: typeof FileTemplatesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/file/results': {
      id: '/file/results'
      path: '/file/results'
      fullPath: '/file/results'
      preLoaderRoute: typeof FileResultsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/queue/manage/$queueName': {
      id: '/queue/manage/$queueName'
      path: '/$queueName'
      fullPath: '/queue/manage/$queueName'
      preLoaderRoute: typeof QueueManageQueueNameRouteImport
      parentRoute: typeof QueueManageRoute
    }
  }
}

interface QueueManageRouteChildren {
  QueueManageQueueNameRoute: typeof QueueManageQueueNameRoute
}

const QueueManageRouteChildren: QueueManageRouteChildren = {
  QueueManageQueueNameRoute: QueueManageQueueNameRoute,
}

const QueueManageRouteWithChildren = QueueManageRoute._addFileChildren(
  QueueManageRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRoute,
  FileResultsRoute: FileResultsRoute,
  FileTemplatesRoute: FileTemplatesRoute,
  QueueManageRoute: QueueManageRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
