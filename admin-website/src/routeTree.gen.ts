/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as QueueDashboardRouteImport } from './routes/queue/dashboard'
import { Route as FileTemplatesRouteImport } from './routes/file/templates'
import { Route as FileResultsRouteImport } from './routes/file/results'

const QueueDashboardRoute = QueueDashboardRouteImport.update({
  id: '/queue/dashboard',
  path: '/queue/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const FileTemplatesRoute = FileTemplatesRouteImport.update({
  id: '/file/templates',
  path: '/file/templates',
  getParentRoute: () => rootRouteImport,
} as any)
const FileResultsRoute = FileResultsRouteImport.update({
  id: '/file/results',
  path: '/file/results',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/file/results': typeof FileResultsRoute
  '/file/templates': typeof FileTemplatesRoute
  '/queue/dashboard': typeof QueueDashboardRoute
}
export interface FileRoutesByTo {
  '/file/results': typeof FileResultsRoute
  '/file/templates': typeof FileTemplatesRoute
  '/queue/dashboard': typeof QueueDashboardRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/file/results': typeof FileResultsRoute
  '/file/templates': typeof FileTemplatesRoute
  '/queue/dashboard': typeof QueueDashboardRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/file/results' | '/file/templates' | '/queue/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to: '/file/results' | '/file/templates' | '/queue/dashboard'
  id: '__root__' | '/file/results' | '/file/templates' | '/queue/dashboard'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  FileResultsRoute: typeof FileResultsRoute
  FileTemplatesRoute: typeof FileTemplatesRoute
  QueueDashboardRoute: typeof QueueDashboardRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/queue/dashboard': {
      id: '/queue/dashboard'
      path: '/queue/dashboard'
      fullPath: '/queue/dashboard'
      preLoaderRoute: typeof QueueDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/file/templates': {
      id: '/file/templates'
      path: '/file/templates'
      fullPath: '/file/templates'
      preLoaderRoute: typeof FileTemplatesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/file/results': {
      id: '/file/results'
      path: '/file/results'
      fullPath: '/file/results'
      preLoaderRoute: typeof FileResultsRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  FileResultsRoute: FileResultsRoute,
  FileTemplatesRoute: FileTemplatesRoute,
  QueueDashboardRoute: QueueDashboardRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
